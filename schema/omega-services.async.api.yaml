asyncapi: 2.6.0
id: http://service.catalogue.nationalarchives.gov.uk
info:
  title: Project Omega Services API
  version: 0.1.0
  description: >
    The Project Omega API allows you to perform Query and CRUD operations
    against assets in The National Archives Catalogue.

    ### Architecture

    This API and the systems connected to it are using an asynchronous messaging
    architecture. This may seem unconventional for those who are used to working
    with HTTP APIs which typically provide a synchronous Request-Reply
    approach, but it has many advantages when integrating systems:

    * Decoupling of Systems

    * Quality of Service and Prioritisation

    * Potential Separation of Reply and Error channels

    * Buffering during individual system outages

    * Ability to Backpressure and easily introduce "Circuit Breakers"

    ### Check out our latest features:

    * Get Legal Statuses (for an Asset) âš–
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Adam Retter
    email: adam@evolvedbinary.com
    url: https://www.evolvedbinary.com


servers:
  mvp-beta:
    url: jms://service.mvbpeta.catalogue.nationalarchives.gov.uk:61616
    protocol: jms
    protocolVersion: '1.1'
    description: MVP Beta - Message Broker
    # security:
      # - saslScram: []
    tags:
      - name: env:mvp-beta
        description: This environment is for the MVP Beta
    bindings:
      jms:
        jmsConnectionFactory: com.amazon.sqs.javamessaging.SQSConnectionFactory
        properties:
        clientID:
        bindingVersion: 0.0.1
defaultContentType: application/json


channels:
  PACS001_REQUEST001:
    description: The queue on which general priority requests should be published
    publish:
      operationId: PACS001_REQUEST001
      description: Request general channel publish operations
      message:
        oneOf:
          - $ref: '#/components/messages/ListAssetLegalStatusSummary'
          - $ref: '#/components/messages/ListAssetLegalStatusFull'
          - $ref: '#/components/messages/ListAgentSummary'
          - $ref: '#/components/messages/ListAgentFull'
          - $ref: '#/components/messages/GetAgentSummary'
          - $ref: '#/components/messages/GetAgentFull'
    bindings:
      jms:
        destinationType: queue
        bindingVersion: 0.0.1

  PACE001_REPLY001:
    description: >-
      The queue on which reply messages will be sent to instance 1 of the
      Catalogue Editorial Web Application
    subscribe:
      operationId: PACE001_REPLY001
      description: >-
        Reply channel operations for instance 1 of the Catalogue Editorial Web
        Application
      message:
        oneOf:
          - $ref: '#/components/messages/GeneralError'
          - $ref: '#/components/messages/InvalidMessageFormatError'
          - $ref: '#/components/messages/InvalidApplicationError'
          - $ref: '#/components/messages/AuthenticationError'
          - $ref: '#/components/messages/UnrecognisedMessageTypeError'
          - $ref: '#/components/messages/InvalidMessageError'
          - $ref: '#/components/messages/ProcessingError'
          - $ref: '#/components/messages/AssetLegalStatusSummaryList'
          - $ref: '#/components/messages/AssetLegalStatusFullList'
          - $ref: '#/components/messages/AgentSummaryList'
          - $ref: '#/components/messages/AgentFullList'
          - $ref: '#/components/messages/AgentSummary'
          - $ref: '#/components/messages/AgentFull'
    bindings:
      jms:
        destinationType: queue
        bindingVersion: 0.0.1


components:


  # TODO(AR) the `securitySchemes` mechanism of AsyncAPI does not seem compatible with the idea of sending the Auth token in the `OMGToken` header. I need Investigate this to see if there is a better way of bringing these two things together, then we can add the security to the `publish` or `subscribe` operation in each channel rather than directly in the messages
  # securitySchemes:
  #   bearerAuthentication:
  #     type: apiKey
  #     in: user
  #     description: Bearer Authentication Token should be provided in the OMGToken header.

  # TODO(AR) TTL - some messages from some applications (e.g. ctd-omega-editorial-frontend) will be time sensitive, and if the TTL has expired by time we come to process the message we could just discard it. We should record these stats somewhere so that we can understand the SLA of processed vs. discarded messages


  messages:

    # NOTE: The `messageID` format is [(OS=Omega Service|OD=Omega Data|OE=Omega Error),(LI=List|GE=Get|UP=Update|CR=Create|RE=Remove),(S=Summary|F=Full)(3 letter mnemonic indicating resource)(3 digit increasing number)]


  ## Service Request Messages

    ListAssetLegalStatusSummary:
      messageId: OSLISALS001
      name: ListAssetLegalStatusSummary
      title: List Asset Legal Status Summaries
      description: List a summary description of each Legal Status applicable to any Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'

    ListAssetLegalStatusFull:
      messageId: OSLIFALS001
      name: ListAssetLegalStatusFull
      title: List Asset Legal Status
      description: List a full description of each Legal Status applicable to any Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'

    ListAgentSummary:
      messageId: OSLISAGT001
      name: ListAgentSummary
      title: List Agent Summaries
      description: List a summary description of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        $ref: '#/components/schemas/ListAgentParameters'

    ListAgentFull:
      messageId: OSLIFAGT001
      name: ListAgentFull
      title: List Agent
      description: List a full description of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        $ref: '#/components/schemas/ListAgentParameters'

    GetAgentSummary:
      messageId: OSGESAGT001
      name: GetAgentSummary
      title: Get Agent Summary
      description: Get a summary description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        type: object
        required:
          - identifier
        properties:
          identifier:
            $ref: '#/components/schemas/GeneralIdentifier'

    GetAgentFull:
      messageId: OSGEFAGT001
      name: GetAgentFull
      title: Get Agent
      description: Get a full description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        type: object
        required:
          - identifier
        properties:
          identifier:
            $ref: '#/components/schemas/GeneralIdentifier'

    GetRecordSummary:
      messageId: OSGESREC001
      name: GetRecordSummary
      title: Get Record Summary
      description: Get a summary description of a Record
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        type: object
        required:
          - identifier
        properties:
          identifier:
            $ref: '#/components/schemas/GeneralIdentifier'

    GetRecordFull:
      messageId: OSGEFREC001
      name: GetRecordFull
      title: Get Record
      description: Get a full description of a Record
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        type: object
        required:
          - identifier
        properties:
          identifier:
            $ref: '#/components/schemas/GeneralIdentifier'


  ## Data Messages (may also be used as Service Reply Messages)

    AssetLegalStatusSummaryList:
      messageId: ODLISALS001
      name: AssetLegalStatusSummaryList
      title: Asset Legal Status Summary List
      description: >-
        List of summary descriptions of each Legal Status applicable to any
        Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          - $ref: '#/components/schemas/LegalStatusSummary'

    AssetLegalStatusFullList:
      messageId: ODLIFALS001
      name: AssetLegalStatusFullList
      title: Asset Legal Status Full List
      description: List of full descriptions of each Legal Status applicable to any Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/LegalStatusFull'

    AgentSummaryList:
      messageId: ODLISAGT001
      name: AgentSummaryList
      title: Agent Summary List
      description: List of summary descriptions of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          - $ref: '#/components/schemas/AgentSummary'

    AgentFullList:
      messageId: ODLIFAGT001
      name: AgentFullList
      title: Agent Full List
      description: List of full descriptions of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/AgentFull'

    AgentSummary:
      messageId: ODENSAGT001
      name: AgentSummary
      title: Agent Summary
      description: Summary description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        $ref: '#/components/schemas/AgentSummary'

    AgentFull:
      messageId: ODENFAGT001
      name: AgentFull
      title: Agent Full
      description: Full description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        $ref: '#/components/schemas/AgentFull'

    RecordSummary:
      messageId: ODENSREC001
      name: RecordSummary
      title: Record Summary
      description: Summary description of a Record
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        $ref: '#/components/schemas/RecordSummary'

    RecordFull:
      messageId: ODENFREC001
      name: RecordFull
      title: Record Full
      description: Full description of a Record
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        $ref: '#/components/schemas/RecordFull'

  ## Error Messages
    GeneralError:
      messageId: OELIFERR001
      name: GeneralError
      title: General Error
      description: >-
        The lowest common denominator of error where it is unclear what went
        wrong
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    InvalidMessageFormatError:
      messageId: OELIFERR002
      name: InvalidMessageFormatError
      title: Invalid Message Format Error
      description: >-
        An error occurred during early stage parsing/recognition of the message.
        This includes extracting and validating the presence of required message
        headers and that they meet their expected data types, extracting the
        body as text and validating that its format (NOT content) is correct
        (i.e. that it is valid JSON/XML/RDF/Binary etc.)
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    InvalidApplicationError:
      messageId: OELIFERR003
      name: InvalidApplicationError
      title: Invalid Application Error
      description: >-
        The client application as identified by the `OMGApplicationID` header is
        either invalid, not-recognised, or prohibited.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    AuthenticationError:
      messageId: OELIFERR004
      name: AuthenticationError
      title: Authentication Error
      description: >-
        Authentication failed, likely due to an invalid token being present in
        the `OMGToken` header.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    UnrecognisedMessageTypeError:
      messageId: OELIFERR005
      name: UnrecognisedMessageTypeError
      title: Unrecognised Message Type Error
      description: >-
        The value of `OMGMessageTypeID` header was not recognised and so the
        message cannot be further dispatched for processing.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    InvalidMessageError:
      messageId: OELIFERR006
      name: InvalidMessageError
      title: Invalid Message Error
      description: >-
        The content of the body of the message has failed validation, e.g. a
        parsed JSON message may be missing some required properties, or those
        properties may have invalid values.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    ProcessingError:
      messageId: OELIFERR007
      name: ProcessingError
      title: Processing Error
      description: >-
        The received message was valid, but the system was unable to complete the
        processing of a message.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'


  messageTraits:

    JMSMessage:
      name: JMS Message
      description: Headers that are mostly common to all JMS Messages
      bindings:
        jms:
          headers:
            required:
              - JMSMessageID
              - JMSTimestamp
            properties:
              JMSMessageID:
                name: JMSMessageID
                description: >-
                  A unique identifier for the message. We suggest using a short
                  application instance specific prefix followed by a unique
                  identifier. In the extreme case a UUID may be used. Depending on
                  your JMS provider, this may be set on your behalf.
                type: string
              JMSTimestamp:
                name: JMSTimestamp
                description: >-
                  The time the message was sent. The value of the timestamp is the
                  amount of time, measured in milliseconds, that has elapsed since
                  midnight, January 1, 1970, UTC. Depending on your JMS provider,
                  this may be set on your behalf.
                type: number
          bindingVersion: 0.0.1

    JMSReply:
      name: JMS Reply Message
      description: JMS Message sent in reply to another JMS Message
      bindings:
        jms:
          headers:
            # required: [JMSCorrelationID]  # NOTE(AR) this is intentionally left optional as it makes it possible to use data messages for both synchronous request-reply, and non-request-reply asynchronous purposes.
            properties:
              JMSCorrelationID:
                name: JMSCorrelationID
                description: >-
                  An identifier that is used to associate this message as a reply to
                  a previous message. The value is the JMSMessageId of the previous
                  message.
                type: string
          bindingVersion: 0.0.1
      correlationId:
        description: >-
          The value is the JMSMessageId of the previous message to which this
          message is to be correlated.
        location: $message.header#/JMSCorrelationID

    OMGMessage:
      name: Omega Message
      description: Headers that are common to all Omega Messages
      headers:
        required:
          - OMGApplicationID
          - OMGMessageTypeID
          - OMGMessageFormat
        type: object
        properties:
          OMGApplicationID:
            name: OMGApplicationID
            description: >-
              Identifier of the application that is publishing the message to
              Omega.
            type: string
            pattern: '[A-Z]{4}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])'
          OMGMessageTypeID:
            name: OMGMessageTypeID
            description: >-
              The Identifier of the Omega Message Type. In AsyncAPI Schema this
              is the `messageId` property of a message defined in the schema.
            type: string
            # NOTE: The `messageID` format is [(OS=Omega Service|OD=Omega Data|OE=Omega Error),(LI=List|GE=Get|UP=Update|CR=Create|RE=Remove),(S=Summary|F=Full)(3 letter mnemonic indicating resource)(3 digit increasing number)]
            pattern: "(OS|OD|OE)(LI|GE|UP|CR|RE)(S|F)[A-Z]{3}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])"
          OMGMessageFormat:
            name: OMGMessageFormat
            description: The Internet Media-Type indicating the format of the message body.
            type: string
            enum:
              - application/json

    OMGAuthentication:
      name: Omega Authentication
      description: Headers that are required for Authentication
      headers:
        required:
          - OMGToken
        type: object
        properties:
          OMGToken:
            name: OMGToken
            description: >-
              An Authentication Token that is valid for the OMGApplicationID and
              request.
            type: string

    OMGRequest:
      name: Omega Request Message
      description: Headers that are common to all Omega Request Messages
      headers:
        required:
          - OMGReplyAddress
        type: object
        properties:
          OMGReplyAddress:
            name: OMGReplyAddress
            description: >-
              The address that the reply to this message should be sent to.
              Typically this is the name of a Queue setup for a specific
              application and must be prefixed with the OMGApplicationID of the
              application that is making the request.
            type: string
            pattern: '[A-Z]{4}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])_([A-Za-z0-9_])+'
            examples:
              - 'PACE001_REPLY001'
              - 'PACE002_REPLY001'
  schemas:

    LegalStatusSummary:
      type: object
      required:
        - identifier
        - label
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        label:
          $ref: '#/components/schemas/GeneralLabel'

    LegalStatusFull:
      type: object
      allOf:
        - $ref: '#/components/schemas/LegalStatusSummary'
        - $ref: '#/components/schemas/DescriptionOfConcept'

    # SKOS like description of concept
    DescriptionOfConcept:
      type: object
      required:
        - definition
      properties:
        definition:
          $ref: '#/components/schemas/GeneralDescription'
        scope-note:
          $ref: '#/components/schemas/GeneralDescription'
        editorial-note:
          type: array
          items:
            $ref: '#/components/schemas/GeneralDatedDescription'

    ListAgentParameters:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AgentTypes'
          description: Limits the list to one-or-more types of Agent. If omitted, all types of agents are included in the list.
        authority-file:
          $ref: '#/components/schemas/AuthorityFile'
          description: Limits the list of Agent(s) to only those that are (or are not) also Authority Files. If omitted both authoritative and non-authoritative Agents are included in the list.
        depository:
          $ref: '#/components/schemas/Depository'
          description: Limits the list of Agent(s) to only those that are (or are not) also a depository. If omitted both depository and non-depository Agents are included in the list.
        version-timestamp:
          $ref: '#/components/schemas/VersionTimestamp'
          description: Limits the list of Agent(s) to only those that have a version timestamp that is greater than or equal to this timestamp.
          default: latest

    AgentSummary:
      type: object
      required:
        - identifier
        - type
        - current-description
        - description
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        type:
          $ref: '#/components/schemas/AgentType'
        current-description:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the current description of the Agent concept
        description:
          type: array
          items:
            $ref: '#/components/schemas/AgentDescriptionSummary'

    AgentFull:
      type: object
      required:
        - identifier
        - type
        - current-description
        - description
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        type:
          $ref: '#/components/schemas/AgentType'
        current-description:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the current description of the Agent concept
        description:
          type: array
          items:
            $ref: '#/components/schemas/AgentDescriptionFull'

    AgentDescriptionSummary:
      type: object
      required:
        - identifier
        - label
        - depository
        - authority-file
        - version-timestamp
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        label:
          $ref: '#/components/schemas/GeneralLabel'
        date-from:
          $ref: '#/components/schemas/ISODateWithTZ'
        date-to:
          $ref: '#/components/schemas/ISODateWithTZ'
        authority-file:
          $ref: '#/components/schemas/AuthorityFile'
        depository:
          $ref: '#/components/schemas/Depository'
        version-timestamp:
          $ref: '#/components/schemas/VersionTimestamp'
        previous-description:
          $ref: '#/components/schemas/GeneralIdentifier'

    AgentDescriptionFull:
      type: object
      allOf:
        - $ref: '#/components/schemas/AgentDescriptionSummary'
        - $ref: '#/components/schemas/AgentDescriptionProperties'

    AgentDescriptionProperties:
      type: object
      properties:
        ### TODO (AR) finish this bit
        honorific-title:
          type: array
          items:
            type: string
        title:
          type: string
        given-name:
          type: array
          items:
            type: string
        surname:
          type: string
        name:
          type: array
          items:
            type: string
        variant-name:
          type: array
          items:
            type: string
        preferred-name:
          type: array
          items:
            type: string
        fuller-form-of-name:
          type: string
        member-of:
          type: array
          items:
            type: object
            required:
              - prominent
              - agent
            properties:
              prominent:
                type: boolean
              agent:
                $ref: '#/components/schemas/GeneralIdentifier'
        predecessor:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        successor:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        descendant:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        broader-affiliation:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        founder:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        associated-place:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        relation:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        field-of-activity:
          type: array
          items:
            type: string
        archon-code:
          type: string
        consulted-source:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        status-of-identification:
          type: string
        timespan-note:
          type: array
          items:
            $ref: '#/components/schemas/DescribedTemporalInterval'
        note:
          type: array
          items:
            $ref: '#/components/schemas/GeneralDescription'

    AgentTypes:
      type: array
      items:
        $ref: '#/components/schemas/AgentType'
      description: One or more types of Agent

    AgentType:
      type: string
      enum:
        - Collective Agent
        - Corporate Body
        - Family
        - Hardware Agent
        - Person
        - Software Agent
      description: A type of Agent

    Depository:
      type: boolean
      description: true to indicate a Place of Deposit, false otherwise

    AuthorityFile:
      type: boolean
      description: true to indicate that this Agent is also considered an Authority File, false otherwise

    RecordSummary:
      type: object
      required:
        - identifier
        - type
        - creator
        - current-description
        - description
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        type:
          $ref: '#/components/schemas/RecordType'
        creator:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the Creating Body of the Record concept, i.e. a URI to an Agent
        current-description:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the current description of the Record concept
        description:
          type: array
          items:
            $ref: '#/components/schemas/RecordDescriptionSummary'

    RecordFull:
      type: object
      required:
        - identifier
        - type
        - creator
        - current-description
        - description
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        type:
          $ref: '#/components/schemas/RecordType'
        creator:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the Creating Body of the Record concept, i.e. a URI to an Agent
        current-description:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the current description of the Record concept
        description:
          type: array
          items:
            $ref: '#/components/schemas/RecordDescriptionFull'

    RecordDescriptionSummary:
      type: object
      required:
        - identifier
        - label
        - abstract
        - access-rights
        - is-part-of
        - version-timestamp
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        secondary-identifier:
          type: array
          items:
            $ref: '#/components/schemas/GeneralTypedIdentifier'
        label:
          $ref: '#/components/schemas/GeneralLabel'
        abstract:
          $ref: '#/components/schemas/GeneralDescription'
        access-rights:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the Rights Statement for the Record description
        is-part-of:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
          description: Links to the parent of which this is part of
        previous-sibling:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: Links to the previous sibling. Used when there is an order of resources to be applied across siblings
        version-timestamp:
          $ref: '#/components/schemas/VersionTimestamp'
        previous-description:
          $ref: '#/components/schemas/GeneralIdentifier'

    RecordDescriptionFull:
      type: object
      allOf:
        - $ref: '#/components/schemas/RecordDescriptionSummary'
        - $ref: '#/components/schemas/RecordDescriptionProperties'

    RecordDescriptionProperties:
      type: object
      properties:
        asset-legal-status:
          $ref: '#/components/schemas/LegalStatusSummary'
        legacy-tna-cs13-record-type:
          $ref: '#/components/schemas/LegacyTNACS13RecordType'
        designation-of-edition:
          type: string
          description: Description identifying an edition to which a record (e.g. Map) belongs.
        created:
          type: object
          oneOf:
            - $ref: '#/components/schemas/DescribedTemporalInstant'
            - $ref: '#/components/schemas/DescribedTemporalInterval'
          description: The period of time or instant during which the record itself was created
        covering:
          type: object
          oneOf:
            - $ref: '#/components/schemas/DescribedTemporalInstant'
            - $ref: '#/components/schemas/DescribedTemporalInterval'
          description: The period of time or instant that the subject matter of the record spans
        archivists-note:
          $ref: '#/components/schemas/GeneralDescription'
          description: An archivists note about the record
        source-of-acquisition:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: The URI of an agent
        custodial-history:
          type: string
        adminstrative-biographical-background:
          type: string
        accumulation:
          type: object
          oneOf:
            - $ref: '#/components/schemas/DescribedTemporalInstant'
            - $ref: '#/components/schemas/DescribedTemporalInterval'
          description: The period of time or instant during which the record was accumulated
        appraisal:
          type: string
        accrual-policy:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: The URI of the accrual policy of the record
        layout:
          type: string
          description: Additional textual information adding context around the arrangement/layout of the record
        publication-note:
          $ref: '#/components/schemas/GeneralDescription'
          description: A note about the publication of the record
        referenced-by:
          type: array
          items:
            $ref: '#/components/schemas/GeneralLabelledIdentifier'
          description: Links to other resource which reference this record
        related-to:
          type: array
          items:
            $ref: '#/components/schemas/GeneralLabelledIdentifier'
          description: Links to related material
        separated-from:
          type: array
          items:
            $ref: '#/components/schemas/GeneralLabelledIdentifier'
          description: Links to separated material
        subject:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/GeneralIdentifier'
              - $ref: '#/components/schemas/GeneralLabelledIdentifier'
          description: Links to subjects. Typically these are URI of Agent, Person, or Location entities with an optional description. They may also be URI of terms from a controlled vocabulary.

    RecordTypes:
      type: array
      items:
        $ref: '#/components/schemas/RecordType'
      description: One or more types of Record

    RecordType:
      type: string
      enum:
        - Physical
        - Digitised
        - Born Digital
        - Hybrid
        # TODO(AR) more to come here later?
        # - Redacted
        # - Surrogate
      description: A type of Record

    LegacyTNACS13RecordType:
      type: string
      enum:
        - Piece
        - Item
      description: The legacy TNA-CS13 type of the Record

    VersionTimestamp:
      oneOf:
        - type: string
          format: 'date-time'
        - type: string
          enum: ['latest', 'all']
      description: An ISO Date Time value (e.g. `date-time` in JSON Schema parlance, or `xs:dateTime` in XML Schema parlance) version timestamp, or the string constants `latest` or `all`.

    GeneralIdentifier:
      type: string
      name: Identifier
      description: An identifier for any general Object, this is typically a URI

    GeneralLabel:
      type: string
      name: Label
      description: A label for any general Object

    GeneralLabelledIdentifier:
      type: object
      name: Labelled Identifier
      description: A labelled identifier for any general Object
      required:
        - identifier
        - label
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        label:
          $ref: '#/components/schemas/GeneralLabel'

    GeneralTypedIdentifier:
      type: object
      name: Typed Identifier
      description: A typed identifier for any general Object
      required:
        - identifier
        - type
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        type:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: A URI indicating the identifier scheme used by the identifier

    GeneralDescription:
      type: string
      name: Description
      description: A description for any general Object

    GeneralDatedDescription:
      type: object
      name: Dated Description
      description: A dated description for any general Object
      required:
        - description
        - date
      properties:
        description:
          $ref: '#/components/schemas/GeneralDescription'
        date:
          $ref: '#/components/schemas/ISODateWithTZ'

    DescribedTemporalInstant:
      type: object
      name: Described Temporal Instant
      description: Descripion of a Temporal Instant
      required:
        - description
        - temporal
      properties:
        description:
          $ref: '#/components/schemas/GeneralDescription'
        temporal:
          $ref: '#/components/schemas/TemporalInstant'

    DescribedTemporalInterval:
      type: object
      name: Described Temporal Interval
      description: Descripion of a Temporal Interval
      required:
        - description
        - temporal
      properties:
        description:
          $ref: '#/components/schemas/GeneralDescription'
        temporal:
          $ref: '#/components/schemas/TemporalInterval'

    TemporalInstant:
      type: object
      name: Temporal Instant
      description: A point in Time
      required:
        - instant
      properties:
        instant:
          oneOf:
            - $ref: '#/components/schemas/ISOYearWithTZ'
            - $ref: '#/components/schemas/ISOYearMonthWithTZ'
            - $ref: '#/components/schemas/ISODateWithTZ'
            - $ref: '#/components/schemas/ISODateTimeWithTZ'

    TemporalInterval:
      type: object
      name: Temporal Interval
      description: An interval of Time
        - starts
        - finishes
      properties:
        date-from:
          oneOf:
            - $ref: '#/components/schemas/ISOYearWithTZ'
            - $ref: '#/components/schemas/ISOYearMonthWithTZ'
            - $ref: '#/components/schemas/ISODateWithTZ'
            - $ref: '#/components/schemas/ISODateTimeWithTZ'
        date-to:
          oneOf:
            - $ref: '#/components/schemas/ISOYearWithTZ'
            - $ref: '#/components/schemas/ISOYearMonthWithTZ'
            - $ref: '#/components/schemas/ISODateWithTZ'
            - $ref: '#/components/schemas/ISODateTimeWithTZ'

    ISOYear:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
      name: ISO Year
      description: A year string formatted according to ISO 8601

    ISOYearWithTZ:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))"
      name: ISO Year with mandatory Time Zone
      description: A year string with a Time Zone formatted according to ISO 8601

    ISOYearMonth:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
      name: ISO Year and Month
      description: A year and month string formatted according to ISO 8601

    ISOYearMonthWithTZ:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))"
      name: ISO Year and Month with mandatory Time Zone
      description: A year and month string with a Time Zone formatted according to ISO 8601

    ISODate:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
      name: ISO date
      description: A date string formatted according to ISO 8601

    ISODateWithTZ:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))"
      name: ISO Date with mandatory Time Zone
      description: A date string with a Time Zone formatted according to ISO 8601

    ISODateTime:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
      name: ISO Date and Time
      description: A date and time string formatted according to ISO 8601

    ISODateTimeWithTZ:
      type: string
      pattern: "([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))"
      name: ISO Date and Time with mandatory Time Zone
      description: A date and time string with a Time Zone formatted according to ISO 8601

    ErrorMessage:
      type: object
      name: Error Message
      description: An error message consisting of a code and a description.
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        description:
          $ref: '#/components/schemas/ErrorDescription'

    ErrorCode:
      type: string
      format: '[A-Z]{4}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])'
      name: Error Code
      description: >-
        A code related to an error. These should be from a controlled list that
        is published as user documentation.

    ErrorDescription:
      type: string
      name: Error Description
      description: The description of an error




tags:
  - name: Project Omega
    description: The new Pan-Archival Catalogue Systems for The National Archives
    externalDocs:
      url: >-
        https://www.nationalarchives.gov.uk/about/our-role/plans-policies-performance-and-projects/our-plans/our-digital-cataloguing-practices/project-omega/
  - name: The National Archives
    description: The National Archives
    externalDocs:
      url: https://www.nationalarchives.gov.uk
