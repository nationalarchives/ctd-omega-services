asyncapi: 2.6.0
id: http://service.catalogue.nationalarchives.gov.uk
info:
  title: Project Omega Services API
  version: 0.1.0
  description: >
    The Project Omega API allows you to perform Query and CRUD operations
    against assets in The National Archives Catalogue.

    ### Architecture

    This API and the systems connected to it are using an asynchronous messaging
    architecture. This may seem unconventional for those who are used to working
    with HTTP APIs which typically provide a synchronous Request-Reply
    approach, but it has many advantages when integrating systems:

    * Decoupling of Systems

    * Quality of Service and Prioritisation

    * Potential Separation of Reply and Error channels

    * Buffering during individual system outages

    * Abilility to Backpressure and easily introduce "Circuit Breakers"

    ### Check out our latest features:

    * Get Legal Statuses (for an Asset) âš–
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Adam Retter
    email: adam@evolvedbinary.com
    url: https://www.evolvedbinary.com


servers:
  mvp-beta:
    url: service.mvbpeta.catalogue.nationalarchives.gov.uk:61616
    protocol: jms
    protocolVersion: '1.1'
    description: MVP Beta - Message Broker
    # security:
      # - saslScram: []
    tags:
      - name: env:mvp-beta
        description: This environment is for the MVP Beta
defaultContentType: application/json


channels:
  request.general:
    description: The queue on which general priority requests should be published
    publish:
      operationId: request_general
      description: Request general channel publish operations
      message:
        oneOf:
          - $ref: '#/components/messages/ListAssetLegalStatusSummary'
          - $ref: '#/components/messages/ListAssetLegalStatusFull'
          - $ref: '#/components/messages/ListAgentSummary'
          - $ref: '#/components/messages/ListAgentFull'
          - $ref: '#/components/messages/GetAgentSummary'
          - $ref: '#/components/messages/GetAgentFull'

  catalogue.editorial.web.application.instance.1:
    description: >-
      The queue on which reply messages will be sent to instance 1 of the
      Catalogue Editorial Web Application
    subscribe:
      operationId: catalogue_editorial_web_application_instance_1
      description: >-
        Reply channel operations for instance 1 of the Catalogue Editorial Web
        Application
      message:
        oneOf:
          - $ref: '#/components/messages/GeneralError'
          - $ref: '#/components/messages/InvalidMessageFormatError'
          - $ref: '#/components/messages/InvalidApplicationError'
          - $ref: '#/components/messages/AuthenticationError'
          - $ref: '#/components/messages/UnrecognisedMessageTypeError'
          - $ref: '#/components/messages/InvalidMessageError'
          - $ref: '#/components/messages/ProcessingError'
          - $ref: '#/components/messages/AssetLegalStatusSummaryList'
          - $ref: '#/components/messages/AssetLegalStatusFullList'
          - $ref: '#/components/messages/AgentSummaryList'
          - $ref: '#/components/messages/AgentFullList'
          - $ref: '#/components/messages/AgentSummary'
          - $ref: '#/components/messages/AgentFull'


components:


  # TODO(AR) the `securitySchemes` mechanism of AsyncAPI does not seem compatible with the idea of sending the Auth token in the `OMGToken` header. I need Investigate this to see if there is a better way of bringing these two things together, then we can add the security to the `publish` or `subscribe` operation in each channel rather than directly in the messages
  # securitySchemes:
  #   bearerAuthentication:
  #     type: apiKey
  #     in: user
  #     description: Bearer Authentication Token should be provided in the OMGToken header.

  # TODO(AR) TTL - some messages from some applications (e.g. ctd-omega-editorial-frontend) will be time sensitive, and if the TTL has expired by time we come to process the message we could just discard it. We should record these stats somewhere so that we can understand the SLA of processed vs. disacrded messages


  messages:

    # NOTE: The `messageID` format is [(OS=Omega Service|OD=Omega Data|OE=Omega Error),(LI=List|GE=Get|UP=Update|CR=Create|RE=Remove),(S=Summary|F=Full)(3 letter mnemonic indicating resource)(3 digit increasing number)]


  ## Service Request Messages

    ListAssetLegalStatusSummary:
      messageId: OSLISALS001
      name: ListAssetLegalStatusSummary
      title: List Asset Legal Status Summaries
      description: List a summary description of each Legal Status applicable to any Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'

    ListAssetLegalStatusFull:
      messageId: OSLIFALS001
      name: ListAssetLegalStatusFull
      title: List Asset Legal Status
      description: List a full description of each Legal Status applicable to any Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'

    ListAgentSummary:
      messageId: OSLISAGT001
      name: ListAgentSummary
      title: List Agent Summaries
      description: List a summary description of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        $ref: '#/components/schemas/ListAgentParameters'

    ListAgentFull:
      messageId: OSLIFAGT001
      name: ListAgentFull
      title: List Agent
      description: List a full description of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        $ref: '#/components/schemas/ListAgentParameters'

    GetAgentSummary:
      messageId: OSGESAGT001
      name: GetAgentSummary
      title: Get Agent Summary
      description: Get a summary description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        type: object
        required:
          - identifier
        properties:
          identifier:
            $ref: '#/components/schemas/GeneralIdentifier'

    GetAgentFull:
      messageId: OSGEFAGT001
      name: GetAgentFull
      title: Get Agent
      description: Get a full description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/OMGMessage'
        - $ref: '#/components/messageTraits/OMGRequest'
        - $ref: '#/components/messageTraits/OMGAuthentication'
      payload:
        type: object
        required:
          - identifier
        properties:
          identifier:
            $ref: '#/components/schemas/GeneralIdentifier'


  ## Data Messages (may also be used as Service Reply Messages)

    AssetLegalStatusSummaryList:
      messageId: ODLISALS001
      name: AssetLegalStatusSummaryList
      title: Asset Legal Status Summary List
      description: >-
        List of summary descriptions of each Legal Status applicable to any
        Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          - $ref: '#/components/schemas/LegalStatusSummary'

    AssetLegalStatusFullList:
      messageId: ODLIFALS001
      name: AssetLegalStatusFullList
      title: Asset Legal Status Full List
      description: List of full descriptions of each Legal Status applicable to any Asset
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/LegalStatusFull'

    AgentSummaryList:
      messageId: ODLISAGT001
      name: AgentSummaryList
      title: Agent Summary List
      description: List of summary descriptions of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          - $ref: '#/components/schemas/AgentSummary'

    AgentFullList:
      messageId: ODLIFAGT001
      name: AgentFullList
      title: Agent Full List
      description: List of full descriptions of each Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/AgentFull'

    AgentSummary:
      messageId: ODENSAGT001
      name: AgentSummary
      title: Agent Summary
      description: Summary description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        $ref: '#/components/schemas/AgentSummary'

    AgentFull:
      messageId: ODENFAGT001
      name: AgentFull
      title: Agent Full
      description: Full description of an Agent
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        $ref: '#/components/schemas/AgentFull'

  ## Error Messages
    GeneralError:
      messageId: OELIFERR001
      name: GeneralError
      title: General Error
      description: >-
        The lowest common denominator of error where it is unclear what went
        wrong
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    InvalidMessageFormatError:
      messageId: OELIFERR002
      name: InvalidMessageFormatError
      title: Invalid Message Format Error
      description: >-
        An error occured during early stage parsing/recognition of the message.
        This includes extracting and validating the presence of required message
        headers and that they meet their excpected data types, extracting the
        body as text and validating that its format (NOT content) is correct
        (i.e. that it is valid JSON/XML/RDF/Binary etc.)
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    InvalidApplicationError:
      messageId: OELIFERR003
      name: InvalidApplicationError
      title: Invalid Application Error
      description: >-
        The client application as identified by the `OMGApplicationID` header is
        either invalid, not-recognised, or prohibited.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    AuthenticationError:
      messageId: OELIFERR004
      name: AuthenticationError
      title: Authentication Error
      description: >-
        Authentication failed, likely due to an invalid token being present in
        the `OMGToken` header.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    UnrecognisedMessageTypeError:
      messageId: OELIFERR005
      name: UnrecognisedMessageTypeError
      title: Unrecognised Message Type Error
      description: >-
        The value of `OMGMessageTypeID` header was not recognised and so the
        message cannot be further dispatched for processing.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    InvalidMessageError:
      messageId: OELIFERR006
      name: InvalidMessageError
      title: Invalid Message Error
      description: >-
        The content of the body of the message has failed validation, e.g. a
        parsed JSON message may be missing some required properties, or those
        properties may have invalid values.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'

    ProcessingError:
      messageId: OELIFERR007
      name: ProcessingError
      title: Processing Error
      description: >-
        The received message was valid, but the system was unable complete the
        processing of a message.
      traits:
        - $ref: '#/components/messageTraits/JMSMessage'
        - $ref: '#/components/messageTraits/JMSReply'
        - $ref: '#/components/messageTraits/OMGMessage'
      payload:
        type: array
        items:
          $ref: '#/components/schemas/ErrorMessage'


  messageTraits:

    JMSMessage:
      name: JMS Message
      description: Headers that are mostly common to all JMS Messages
      headers:
        required:
          - JMSMessageID
          - JMSTimestamp
        properties:
          JMSMessageID:
            name: JMSMessageID
            description: >-
              A unique identifier for the message. We suggest using a short
              application instance specific prefix followed by a unique
              identifier. In the extreme case a UUID may be used. Depending on
              your JMS provider, this may be set on your behalf.
            type: string
          JMSTimestamp:
            name: JMSTimestamp
            description: >-
              The time the message was sent. The value of the timestamp is the
              amount of time, measured in milliseconds, that has elapsed since
              midnight, January 1, 1970, UTC. Depending on your JMS provider,
              this may be set on your behalf.
            type: number

    JMSReply:
      name: JMS Reply Message
      description: JMS Message sent in reply to another JMS Message
      headers:
        # required: [JMSCorrelationID]  # NOTE(AR) this is intentionally left optional as it makes it possible to use data messages for both synchronous request-reply, and non-request-reply  asynchronous purposes.
        properties:
          JMSCorrelationID:
            name: JMSCorrelationID
            description: >-
              An identifier that is used to associate this message as a reply to
              a previous message. The value is the JMSMessageId of the previous
              message.
            type: string
      correlationId:
        description: >-
          The value is the JMSMessageId of the previous message to which this
          message is to be correlated.
        location: $message.header#/JMSCorrelationID

    OMGMessage:
      name: Omega Message
      description: Headers that are common to all Omega Messages
      headers:
        required:
          - OMGApplicationID
          - OMGMessageTypeID
          - OMGMessageFormat
        type: object
        properties:
          OMGApplicationID:
            name: OMGApplicationID
            description: >-
              Identifier of the application that is publishing the message to
              Omega.
            type: string
            pattern: '[A-Z]{4}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])'
          OMGMessageTypeID:
            name: OMGMessageTypeID
            description: >-
              The Identifier of the Omega Message Type. In AsyncAPI Schema this
              is the `messageId` property of a message defined in the schema.
            type: string
            # NOTE: The `messageID` format is [(OS=Omega Service|OD=Omega Data|OE=Omega Error),(LI=List|GE=Get|UP=Update|CR=Create|RE=Remove),(S=Summary|F=Full)(3 letter mnemonic indicating resource)(3 digit increasing number)]
            pattern: "(OS|OD|OE)(LI|GE|UP|CR|RE)(S|F)[A-Z]{3}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])"
          OMGMessageFormat:
            name: OMGMessageFormat
            description: The Internet Media-Type indicating the format of the message body.
            type: string
            enum:
              - application/json

    OMGAuthentication:
      name: Omega Authentication
      description: Headers that are required for Authentication
      headers:
        required:
          - OMGToken
        type: object
        properties:
          OMGToken:
            name: OMGToken
            description: >-
              An Authentication Token that is valid for the OMGApplicationID and
              request.
            type: string

    OMGRequest:
      name: Omega Request Message
      description: Headers that are common to all Omega Request Messages
      headers:
        required:
          - OMGReplyAddress
        type: object
        properties:
          OMGReplyAddress:
            name: OMGReplyAddress
            description: >-
              The address that the reply to this message should be sent to.
              Typically this is the name of a Queue setup for a specific
              application and must be prefixed with the OMGApplicationID of the
              application that is making the request.
            type: string
            pattern: '[A-Z]{4}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])_([A-Za-z0-9_])+'
            examples:
              - 'PACE001_REPLY_1'
              - 'OMGR002_REPLY'
  schemas:

    LegalStatusSummary:
      type: object
      required:
        - identifier
        - label
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        label:
          $ref: '#/components/schemas/GeneralLabel'

    LegalStatusFull:
      type: object
      allOf:
        - $ref: '#/components/schemas/LegalStatusSummary'
        - $ref: '#/components/schemas/DescriptionOfConcept'

    # SKOS like description of concept
    DescriptionOfConcept:
      type: object
      required:
        - defintion
      properties:
        definition:
          $ref: '#/components/schemas/GeneralDescription'
        scope-note:
          $ref: '#/components/schemas/GeneralDescription'
        editorial-note:
          type: array
          items:
            $ref: '#/components/schemas/GeneralDatedDescription'

    ListAgentParameters:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AgentTypes'
          description: Limits the list to one-or-more types of Agent. If omitted, all types of agents are included in the list.
        authority-file:
          $ref: '#/components/schemas/AuthorityFile'
          description: Limits the list of Agent(s) to only those that are (or are not) also Authority Files. If omitted both authorative and non-authorative Agents are included in the list.
        depository:
          $ref: '#/components/schemas/Depository'
          description: Limits the list of Agent(s) to only those that are (or are not) also a depository. If omitted both depository and non-depository Agents are included in the list.
        version-timestamp:
          $ref: '#/components/schemas/VersionTimestamp'
          description: Limits the list of Agent(s) to only those that have a version timestamp that is greated than or equal to this timestamp.
          default: latest

    AgentSummary:
      type: object
      required:
        - identifier
        - type
        - current-description
        - description
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        type:
          $ref: '#/components/schemas/AgentType'
        current-description:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the current description of the Agent concept
        description:
          type: array
          items:
            $ref: '#/components/schemas/AgentDescriptionSummary'

    AgentFull:
      type: object
      required:
        - identifier
        - type
        - current-description
        - description
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        type:
          $ref: '#/components/schemas/AgentType'
        current-description:
          $ref: '#/components/schemas/GeneralIdentifier'
          description: the identifier of the current description of the Agent concept
        description:
          type: array
          items:
            $ref: '#/components/schemas/AgentDescriptionFull'

    AgentDescriptionSummary:
      type: object
      required:
        - identifier
        - label
        - depository
        - authority-file
        - version-timestamp
      properties:
        identifier:
          $ref: '#/components/schemas/GeneralIdentifier'
        label:
          $ref: '#/components/schemas/GeneralLabel'
        date-from:
          $ref: '#/components/schemas/ISODate'
        date-to:
          $ref: '#/components/schemas/ISODate'
        authority-file:
          $ref: '#/components/schemas/AuthorityFile'
        depository:
          $ref: '#/components/schemas/Depository'
        version-timestamp:
          $ref: '#/components/schemas/VersionTimestamp'
        previous-description:
          $ref: '#/components/schemas/GeneralIdentifier'

    AgentDescriptionFull:
      type: object
      allOf:
        - $ref: '#/components/schemas/AgentDescriptionSummary'
        - $ref: '#/components/schemas/AgentDescriptionProperties'

    AgentDescriptionProperties:
      type: object
      properties:
        ###Â TODO (AR) finish this bit
        honourific-title:
          type: array
          items:
            type: string
        title:
          type: string
        given-name:
          type: array
          items:
            type: string
        surname:
          type: string
        name:
          type: array
          items:
            type: string
        variant-name:
          type: array
          items:
            type: string
        prefererred-name:
          type: array
          items:
            type: string
        fuller-form-of-name:
          type: string
        member-of:
          type: array
          items:
            type: object
            required:
              - prominent
              - agent
            properties:
              prominent:
                type: boolean
              agent:
                $ref: '#/components/schemas/GeneralIdentifier'
        predecesor:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        sucessor:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        descendant:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        broader-affiliation:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        founder:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        assoociated-place:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        relation:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        field-of-activity:
          type: array
          items:
            type: string
        archon-code:
          type: string
        consulted-source:
          type: array
          items:
            $ref: '#/components/schemas/GeneralIdentifier'
        status-of-identification:
          type: string
        timespan-note:
          type: array
          items:
            type: object
            properties:
              date-from:
                $ref: '#/components/schemas/ISODate'
              date-to:
                $ref: '#/components/schemas/ISODate'
              note:
                type: string
        note:
          type: array
          items:
            type: string

    AgentTypes:
      type: array
      items:
        $ref: '#/components/schemas/AgentType'
      description: One or more types of Agent

    AgentType:
      type: string
      enum:
        - Collective Agent
        - Corporate Body
        - Family
        - Hardware Agent
        - Person
        - Software Agent
      description: A type of Agent

    Depository:
      type: boolean
      description: true to indicate a Place of Deposit, false otherwise

    AuthorityFile:
      type: boolean
      description: true to indicate that this Agent is also considered an Authority File, false otherwise

    VersionTimestamp:
      type: [date-time, string]
      description: A version timestamp, or the string constants `latest` or `all`.

    GeneralIdentifier:
      type: string
      name: Identifier
      description: An identifier for any general Object, this is typically a URI

    GeneralLabel:
      type: string
      name: Label
      description: A label for any general Object

    GeneralDescription:
      type: string
      name: Description
      description: A description for any general Object

    GeneralDatedDescription:
      type: object
      name: Dated Description
      description: A dated description for any general Object
      properties:
        description:
          $ref: '#/components/schemas/GeneralDescription'
        date:
          $ref: '#/components/schemas/ISODate'

    ISODate:
      type: string
      format: date
      name: ISO date
      description: A date string formatted according to ISO 8601

    ErrorMessage:
      type: object
      name: Error Message
      description: An error message consisting of a code and a description.
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        description:
          $ref: '#/components/schemas/ErrorDescription'

    ErrorCode:
      type: string
      format: '[A-Z]{4}([1-9][0-9][0-9]|0[1-9][0-9]|00[1-9])'
      name: Error Code
      description: >-
        A code related to an error. These should be from a controlled list that
        is published as user documentation.

    ErrorDescription:
      type: string
      name: Error Description
      description: The description of an error




tags:
  - name: Project Omega
    description: The new Pan-Archival Catalogue Systems for The National Archives
    externalDocs:
      url: >-
        https://www.nationalarchives.gov.uk/about/our-role/plans-policies-performance-and-projects/our-plans/our-digital-cataloguing-practices/project-omega/
  - name: The National Archives
    description: The National Archives
    externalDocs:
      url: https://www.nationalarchives.gov.uk
